{{- if .Values.statefulset.enabled -}}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name:  {{ include "iag.fullname" . }}
  labels:
    {{- include "iag.labels" . | nindent 4 }}
    app.kubernetes.io/component: "statefulset"
  annotations:
    kubernetes.io/description: "Itential Automation Gateway StatefulSet that executes the IAG container."
    {{- include "iag.annotations" . | nindent 4 }}
spec:
  serviceName: "iag-service"
  selector:
    matchLabels:
      {{- include "iag.selectorLabels" . | nindent 6 }}
  replicas: {{ .Values.replicaCount }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "iag.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: "{{ .Values.serviceAccount.name }}"
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
      - name: {{ .Chart.Name }}
        command:
          - "automation-gateway"
          - "--sync-config"
        securityContext:
          {{- toYaml .Values.securityContext | nindent 12 }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        {{- if .Values.applicationSettings.enabled }}
        env:
          - name: automation_gateway_port
            value: {{ .Values.applicationPort | quote }}
        {{- range $key, $value := .Values.applicationSettings.env }}
          - name: {{ $key }}
            value: {{ $value | quote }}
        {{- end }}
        {{- end }}
        ports:
          - name: http
            containerPort: {{ .Values.service.port }}
            protocol: TCP
        {{- if .Values.startupProbe.enabled }}
        startupProbe:
          failureThreshold: {{ .Values.startupProbe.failureThreshold }}
          httpGet:
            path: {{ .Values.startupProbe.path }}
            port: {{ .Values.applicationPort }}
            scheme: {{ ternary "HTTPS" "HTTP" .Values.useTLS }}
          initialDelaySeconds: {{ .Values.startupProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.startupProbe.periodSeconds }}
          successThreshold: {{ .Values.startupProbe.successThreshold }}
          timeoutSeconds: {{ .Values.startupProbe.timeoutSeconds }}
        {{- end }}
        {{- if .Values.livenessProbe.enabled }}
        livenessProbe:
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
          httpGet:
            path: {{ .Values.livenessProbe.path }}
            port: {{ .Values.applicationPort }}
            scheme: {{ ternary "HTTPS" "HTTP" .Values.useTLS }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
        {{- end }}
        {{- if .Values.readinessProbe.enabled }}
        readinessProbe:
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
          httpGet:
            path: {{ .Values.readinessProbe.path }}
            port: {{ .Values.applicationPort }}
            scheme: {{ ternary "HTTPS" "HTTP" .Values.useTLS }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
        {{- end }}
        {{- if .Values.resourcesEnabled }}
        resources:  {{- toYaml .Values.resources | nindent 10 }}
        {{- end }}
        volumeMounts:
          {{- if .Values.useTLS }}
          - name: gateway-cert-volume
            mountPath: /etc/ssl/certs/gateway/server.crt
            subPath: tls.crt
            readOnly: true
          - name: gateway-cert-volume
            mountPath: /etc/ssl/certs/gateway/server.key
            subPath: tls.key
            readOnly: true
          - name: gateway-cert-volume
            mountPath: /etc/ssl/certs/gateway/ca-bundle.crt
            subPath: ca.crt
            readOnly: true
          {{- end }}
          {{- if .Values.configMap.enabled }}
          # Uses a configmap to mount a customized ansible config file at the below path
          - name: "config-volume"
            mountPath: "/etc/ansible/ansible.cfg"
            subPath: "ansible.cfg"
          {{- end }}
          {{- if .Values.persistentVolumeClaims.enabled }}
          # Uses a persistent volume claim to mount a directory where the IAG sqlite database
          # files and log files are stored. Must be unique per container
          - name: "iag-data-volume"
            mountPath: "/var/lib/automation-gateway"
          # Uses a persistent volume claim to mount a directory where the IAG application will
          # store any customer authored scripts and device inventory files.
          - name: "iag-code-volume"
            mountPath: "/usr/share/automation-gateway"
          {{- end }}
          {{- if .Files.Glob "files/ssh_config" }}
          # Uses a configmap to mount a customized SSH client config file at the below path
          - name: "ssh-volume"
            mountPath: "/etc/ssh/ssh_config"
            subPath: "ssh_config"
            readOnly: true
          {{- end }}
        {{- with .Values.volumeMounts }}
          {{- toYaml . | nindent 10 }}
        {{- end }}
      volumes:
        {{- if .Values.useTLS }}
        - name: gateway-cert-volume
          secret:
            secretName: {{ include "iag.fullname" . }}-tls-secret
        {{- end }}
        {{- if .Values.configMap.enabled }}
        # config-volume is a configmap that contains files that are required by the IAG
        # application and can be customized.
        - name: "config-volume"
          configMap:
            name: "iag-config-map"
        {{- end }}
        {{- if .Files.Glob "files/ssh_config" }}
        - name: "ssh-volume"
          configMap:
            name: "ssh-config-map"
        {{- end }}
      {{- with .Values.volumes }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
        - name: id-rsa-perms
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          command: ["/bin/sh", "-c", "find /usr/share/automation-gateway/ssh -name id_rsa -exec chmod 0400 {} \\;"]
          volumeMounts:
            - name: iag-code-volume
              mountPath: /usr/share/automation-gateway
  {{- if .Values.persistentVolumeClaims.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: "iag-data-volume"
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: {{ .Values.persistentVolumeClaims.dataClaim.storage }}
        storageClassName: {{ .Values.storageClass.name }}
    - metadata:
        name: "iag-code-volume"
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: {{ .Values.persistentVolumeClaims.codeClaim.storage }}
        storageClassName: {{ .Values.storageClass.name }}
  {{- end }}
{{- end }}