suite: test configmap template
templates:
  - configmap.yaml
values:
  - ../tests/test-values.yaml
tests:
  - it: should not render configmap when disabled
    set:
      configMap.enabled: false
    asserts:
      - hasDocuments:
          count: 0

  - it: should render configmap when enabled
    set:
      configMap.enabled: true
      configMap.propertiesYaml.port: 8080
      configMap.propertiesYaml.bindAddress: "0.0.0.0"
      configMap.propertiesYaml.serverThreads: 4
      configMap.propertiesYaml.logDir: "/var/log/automation-gateway"
      configMap.propertiesYaml.dataDir: "/var/lib/automation-gateway"
      configMap.propertiesYaml.customDir: "/usr/share/automation-gateway"
      configMap.propertiesYaml.enableAnsible: true
      configMap.propertiesYaml.ansibleDebug: false
      configMap.propertiesYaml.enableHttp: true
      configMap.propertiesYaml.enableNetconf: false
      configMap.propertiesYaml.enableNetmiko: false
      configMap.propertiesYaml.enableNornir: false
      configMap.propertiesYaml.enableScripts: true
      configMap.propertiesYaml.enablePythonVenvs: false
      configMap.propertiesYaml.enableGrpc: false
      configMap.propertiesYaml.enableGit: false
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: ConfigMap
      - isAPIVersion:
          of: v1

  - it: should set correct metadata
    set:
      configMap.enabled: true
      configMap.propertiesYaml.port: 8080
      configMap.propertiesYaml.bindAddress: "0.0.0.0"
      configMap.propertiesYaml.serverThreads: 4
      configMap.propertiesYaml.logDir: "/var/log/automation-gateway"
      configMap.propertiesYaml.dataDir: "/var/lib/automation-gateway"
      configMap.propertiesYaml.customDir: "/usr/share/automation-gateway"
      configMap.propertiesYaml.enableAnsible: true
      configMap.propertiesYaml.ansibleDebug: false
      configMap.propertiesYaml.enableHttp: true
      configMap.propertiesYaml.enableNetconf: false
      configMap.propertiesYaml.enableNetmiko: false
      configMap.propertiesYaml.enableNornir: false
      configMap.propertiesYaml.enableScripts: true
      configMap.propertiesYaml.enablePythonVenvs: false
      configMap.propertiesYaml.enableGrpc: false
      configMap.propertiesYaml.enableGit: false
    asserts:
      - equal:
          path: metadata.name
          value: iag-config-map

  - it: should contain ansible.cfg data
    set:
      configMap.enabled: true
      configMap.propertiesYaml.port: 8080
      configMap.propertiesYaml.bindAddress: "0.0.0.0"
      configMap.propertiesYaml.serverThreads: 4
      configMap.propertiesYaml.logDir: "/var/log/automation-gateway"
      configMap.propertiesYaml.dataDir: "/var/lib/automation-gateway"
      configMap.propertiesYaml.customDir: "/usr/share/automation-gateway"
      configMap.propertiesYaml.enableAnsible: true
      configMap.propertiesYaml.ansibleDebug: false
      configMap.propertiesYaml.enableHttp: true
      configMap.propertiesYaml.enableNetconf: false
      configMap.propertiesYaml.enableNetmiko: false
      configMap.propertiesYaml.enableNornir: false
      configMap.propertiesYaml.enableScripts: true
      configMap.propertiesYaml.enablePythonVenvs: false
      configMap.propertiesYaml.enableGrpc: false
      configMap.propertiesYaml.enableGit: false
    asserts:
      - isNotNull:
          path: data["ansible.cfg"]
      - matchRegex:
          path: data["ansible.cfg"]
          pattern: "\\[defaults\\]"
      - matchRegex:
          path: data["ansible.cfg"]
          pattern: "collections_path="

  - it: should have the expected standard annotations
    set:
      configMap:
        annotations: {}
    asserts:
      - exists:
          path: metadata.annotations["itential.com/copyright"]
      - exists:
          path: metadata.annotations["itential.com/license"]
      - exists:
          path: metadata.annotations["helm.sh/template-file"]

  - it: should allow for custom annotations
    set:
      configMap:
        annotations:
          foo: "bar"
    asserts:
      - equal:
          path: metadata.annotations["foo"]
          value: bar