suite: test statefulset template
templates:
  - statefulset.yaml
values:
  - ../tests/test-values.yaml
tests:
  # Test 1: Basic StatefulSet creation
  - it: should create StatefulSet when enabled
    set:
      statefulset.enabled: true
      serviceAccount.name: "test-sa"
      applicationPort: 8443
      replicaCount: 1
      image:
        repository: "test-repo"
        tag: "latest"
      storageClass:
        name: "test-storage"
      persistentVolumeClaims:
        enabled: true
        dataClaim:
          storage: "10Gi"
        codeClaim:
          storage: "10Gi"
      applicationSettings:
        enabled: true
        env: {}
    asserts:
      - hasDocuments:
          count: 1
      - isKind:
          of: StatefulSet
      - equal:
          path: metadata.name
          value: RELEASE-NAME-iag

  # Test 2: StatefulSet should not be created when disabled
  - it: should not create StatefulSet when disabled
    set:
      statefulset.enabled: false
    asserts:
      - hasDocuments:
          count: 0

  # Test 3: Check basic metadata and labels
  - it: should set correct metadata and labels
    set:
      statefulset.enabled: true
      serviceAccount.name: "test-sa"
      applicationSettings:
        enabled: true
        env: {}
    asserts:
      - equal:
          path: metadata.labels["app.kubernetes.io/component"]
          value: "statefulset"
      - equal:
          path: spec.serviceName
          value: "iag-service"
      - equal:
          path: spec.replicas
          value: 1

  # Test 4: Test environment variables with applicationSettings enabled
  - it: should set correct environment variables when applicationSettings enabled
    set:
      statefulset.enabled: true
      serviceAccount.name: "test-sa"
      applicationPort: 9000
      applicationSettings:
        enabled: true
        ansibleEnabled: true
        nornirEnabled: true
        scriptsEnabled: true
        pythonVenvEnabled: true
        gitEnabled: true
        grpcEnabled: true
        httpRequestsEnabled: true
        netconfEnabled: true
        netmikoEnabled: true
        env:
          custom_env_var: "custom_value"
          automation_gateway_logging_level: "DEBUG"
    asserts:
      - equal:
          path: spec.template.spec.containers[0].env[?(@.name == "automation_gateway_port")].value
          value: "9000"
      - equal:
          path: spec.template.spec.containers[0].env[?(@.name == "automation_gateway_ansible_enabled")].value
          value: "true"
      - equal:
          path: spec.template.spec.containers[0].env[?(@.name == "automation_gateway_nornir_enabled")].value
          value: "true"
      - equal:
          path: spec.template.spec.containers[0].env[?(@.name == "automation_gateway_scripts_enabled")].value
          value: "true"
      - equal:
          path: spec.template.spec.containers[0].env[?(@.name == "custom_env_var")].value
          value: "custom_value"

  # Test 5: Test TLS configuration
  - it: should configure TLS environment variables when useTLS is true
    set:
      statefulset.enabled: true
      serviceAccount.name: "test-sa"
      useTLS: true
      applicationSettings:
        enabled: true
        env: {}
    asserts:
      - equal:
          path: spec.template.spec.containers[0].env[?(@.name == "automation_gateway_server_certfile")].value
          value: "/etc/ssl/gateway/server.crt"
      - equal:
          path: spec.template.spec.containers[0].env[?(@.name == "automation_gateway_server_keyfile")].value
          value: "/etc/ssl/gateway/server.key"
      - equal:
          path: spec.template.spec.containers[0].env[?(@.name == "automation_gateway_server_cabundle")].value
          value: "/etc/ssl/gateway/ca-bundle.crt"

  # Test 6: Test TLS volume mounts
  - it: should mount TLS volumes when useTLS is true
    set:
      statefulset.enabled: true
      serviceAccount.name: "test-sa"
      useTLS: true
      applicationSettings:
        enabled: true
        env: {}
    asserts:
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: gateway-cert-volume
            mountPath: /etc/ssl/gateway/server.crt
            subPath: tls.crt
            readOnly: true
      - contains:
          path: spec.template.spec.volumes
          content:
            name: gateway-cert-volume
            secret:
              secretName: RELEASE-NAME-iag-tls-secret

  # Test 7: Test persistent volume claims
  - it: should create volume claim templates when PVC enabled
    set:
      statefulset.enabled: true
      serviceAccount.name: "test-sa"
      persistentVolumeClaims:
        enabled: true
        dataClaim:
          storage: "20Gi"
        codeClaim:
          storage: "30Gi"
      storageClass:
        name: "fast-ssd"
      applicationSettings:
        enabled: true
        env: {}
    asserts:
      - equal:
          path: spec.volumeClaimTemplates[0].metadata.name
          value: "iag-data-volume"
      - equal:
          path: spec.volumeClaimTemplates[0].spec.resources.requests.storage
          value: "20Gi"
      - equal:
          path: spec.volumeClaimTemplates[0].spec.storageClassName
          value: "fast-ssd"
      - equal:
          path: spec.volumeClaimTemplates[1].metadata.name
          value: "iag-code-volume"
      - equal:
          path: spec.volumeClaimTemplates[1].spec.resources.requests.storage
          value: "30Gi"

  # Test 8: Test volume mounts for PVCs
  - it: should mount persistent volumes when PVC enabled
    set:
      statefulset.enabled: true
      serviceAccount.name: "test-sa"
      persistentVolumeClaims:
        enabled: true
        dataClaim:
          storage: "10Gi"
        codeClaim:
          storage: "10Gi"
      applicationSettings:
        enabled: true
        env: {}
    asserts:
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: "iag-data-volume"
            mountPath: "/var/lib/automation-gateway"
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: "iag-code-volume"
            mountPath: "/usr/share/automation-gateway"

  # Test 9: Test ConfigMap volume mounting
  - it: should mount configmap volume when configMap enabled
    set:
      statefulset.enabled: true
      serviceAccount.name: "test-sa"
      configMap:
        enabled: true
      applicationSettings:
        enabled: true
        env: {}
    asserts:
      - contains:
          path: spec.template.spec.containers[0].volumeMounts
          content:
            name: "config-volume"
            mountPath: "/etc/ansible/ansible.cfg"
            subPath: "ansible.cfg"
      - contains:
          path: spec.template.spec.volumes
          content:
            name: "config-volume"
            configMap:
              name: "iag-config-map"

  # Test 10: Test initContainer configuration
  - it: should create initContainer for SSH key permissions
    set:
      statefulset.enabled: true
      serviceAccount.name: "test-sa"
      image:
        repository: "test-repo"
        tag: "v1.0.0"
      applicationSettings:
        enabled: true
        env: {}
    asserts:
      - equal:
          path: spec.template.spec.initContainers[0].name
          value: "id-rsa-perms"
      - equal:
          path: spec.template.spec.initContainers[0].image
          value: "test-repo:v1.0.0"
      - contains:
          path: spec.template.spec.initContainers[0].volumeMounts
          content:
            name: iag-code-volume
            mountPath: /usr/share/automation-gateway

  # Test 11: Test probes configuration
  - it: should configure startup probe when enabled
    set:
      statefulset.enabled: true
      serviceAccount.name: "test-sa"
      applicationPort: 8443
      useTLS: true
      startupProbe:
        enabled: true
        initialDelaySeconds: 30
        periodSeconds: 10
        failureThreshold: 18
        successThreshold: 1
        timeoutSeconds: 5
        path: "/api/v2.0/poll"
      applicationSettings:
        enabled: true
        env: {}
    asserts:
      - equal:
          path: spec.template.spec.containers[0].startupProbe.httpGet.path
          value: "/api/v2.0/poll"
      - equal:
          path: spec.template.spec.containers[0].startupProbe.httpGet.port
          value: 8443
      - equal:
          path: spec.template.spec.containers[0].startupProbe.httpGet.scheme
          value: "HTTPS"
      - equal:
          path: spec.template.spec.containers[0].startupProbe.initialDelaySeconds
          value: 30

  # Test 12: Test liveness probe
  - it: should configure liveness probe when enabled
    set:
      statefulset.enabled: true
      serviceAccount.name: "test-sa"
      applicationPort: 8080
      useTLS: false
      livenessProbe:
        enabled: true
        periodSeconds: 20
        timeoutSeconds: 10
        failureThreshold: 5
        successThreshold: 1
        path: "/health"
      applicationSettings:
        enabled: true
        env: {}
    asserts:
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.httpGet.scheme
          value: "HTTP"
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.periodSeconds
          value: 20
      - equal:
          path: spec.template.spec.containers[0].livenessProbe.failureThreshold
          value: 5

  # Test 13: Test readiness probe
  - it: should configure readiness probe when enabled
    set:
      statefulset.enabled: true
      serviceAccount.name: "test-sa"
      readinessProbe:
        enabled: true
        periodSeconds: 15
        path: "/ready"
      applicationSettings:
        enabled: true
        env: {}
    asserts:
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.httpGet.path
          value: "/ready"
      - equal:
          path: spec.template.spec.containers[0].readinessProbe.periodSeconds
          value: 15

  # Test 14: Test resources configuration
  - it: should set resources when resourcesEnabled is true
    set:
      statefulset.enabled: true
      serviceAccount.name: "test-sa"
      resourcesEnabled: true
      resources:
        limits:
          cpu: "2000m"
          memory: "512Mi"
        requests:
          cpu: "1000m"
          memory: "256Mi"
      applicationSettings:
        enabled: true
        env: {}
    asserts:
      - equal:
          path: spec.template.spec.containers[0].resources.limits.cpu
          value: "2000m"
      - equal:
          path: spec.template.spec.containers[0].resources.requests.memory
          value: "256Mi"

  # Test 15: Test pod security context
  - it: should set pod security context
    set:
      statefulset.enabled: true
      serviceAccount.name: "test-sa"
      podSecurityContext:
        fsGroup: 2000
        runAsUser: 2000
        runAsNonRoot: true
      applicationSettings:
        enabled: true
        env: {}
    asserts:
      - equal:
          path: spec.template.spec.securityContext.fsGroup
          value: 2000
      - equal:
          path: spec.template.spec.securityContext.runAsUser
          value: 2000
      - equal:
          path: spec.template.spec.securityContext.runAsNonRoot
          value: true

  # Test 16: Test node selector and tolerations
  - it: should set node selector and tolerations
    set:
      statefulset.enabled: true
      serviceAccount.name: "test-sa"
      nodeSelector:
        kubernetes.io/arch: "amd64"
      tolerations:
        - key: "special"
          operator: "Equal"
          value: "true"
          effect: "NoSchedule"
      applicationSettings:
        enabled: true
        env: {}
    asserts:
      - equal:
          path: spec.template.spec.nodeSelector["kubernetes.io/arch"]
          value: "amd64"
      - equal:
          path: spec.template.spec.tolerations[0].key
          value: "special"

  # Test 17: Test conditional environment variables
  - it: should set conditional env vars based on feature flags
    set:
      statefulset.enabled: true
      serviceAccount.name: "test-sa"
      applicationSettings:
        enabled: true
        ansibleEnabled: false
        nornirEnabled: false
        scriptsEnabled: false
        gitEnabled: false
        env:
          automation_gateway_git_strict_host_check: "true"
    asserts:
      - equal:
          path: spec.template.spec.containers[0].env[?(@.name == "automation_gateway_ansible_enabled")].value
          value: "false"
      - equal:
          path: spec.template.spec.containers[0].env[?(@.name == "automation_gateway_nornir_enabled")].value
          value: "false"
      - equal:
          path: spec.template.spec.containers[0].env[?(@.name == "automation_gateway_scripts_enabled")].value
          value: "false"
      - equal:
          path: spec.template.spec.containers[0].env[?(@.name == "automation_gateway_git_enabled")].value
          value: "false"

  # Test 18: Test environment variables are properly quoted
  - it: should properly quote all environment variable values
    set:
      statefulset.enabled: true
      serviceAccount.name: "test-sa"
      applicationSettings:
        enabled: true
        ansibleEnabled: true
        env:
          test_bool: true
          test_number: 123
          test_string: "hello"
    asserts:
      - equal:
          path: spec.template.spec.containers[0].env[?(@.name == "automation_gateway_ansible_enabled")].value
          value: "true"
      - equal:
          path: spec.template.spec.containers[0].env[?(@.name == "test_bool")].value
          value: "true"
      - equal:
          path: spec.template.spec.containers[0].env[?(@.name == "test_number")].value
          value: "123"

  # Test 19: Test without applicationSettings
  - it: should work when applicationSettings is disabled
    set:
      statefulset.enabled: true
      serviceAccount.name: "test-sa"
      applicationSettings:
        enabled: false
    asserts:
      - isKind:
          of: StatefulSet
      - notExists:
          path: spec.template.spec.containers[0].env

  # Test 20: Test Pod IP binding
  - it: should configure Pod IP binding for automation_gateway_bind_address
    set:
      statefulset.enabled: true
      serviceAccount.name: "test-sa"
      applicationSettings:
        enabled: true
        env: {}
    asserts:
      - equal:
          path: spec.template.spec.containers[0].env[?(@.name == "automation_gateway_bind_address")].valueFrom.fieldRef.fieldPath
          value: "status.podIP"

  - it: should have the expected standard annotations
    set:
      statefulset:
        enabled: true
        annotations: {}
    asserts:
      - exists:
          path: metadata.annotations["itential.com/copyright"]
      - exists:
          path: metadata.annotations["itential.com/license"]
      - exists:
          path: metadata.annotations["helm.sh/template-file"]

  - it: should allow for custom annotations
    set:
      statefulset:
        enabled: true
      podAnnotations:
        foo: "bar"
    asserts:
      - equal:
          path: spec.template.metadata.annotations["foo"]
          value: bar

  - it: should set the expected environment variables when hashi vault is enabled
    set:
      statefulset:
        enabled: true
      applicationSettings:
        hvEnabled: true
        hvSecretName: "hv-secret"
        hvHost: "hashivault.example.com"
        hvTLS: true
        hvCertVerification: true
        hvMountPoint: "secret"
    asserts:
      - equal:
          path: spec.template.spec.containers[0].env[?(@.name == "automation_gateway_vault_enabled")].value
          value: "true"
      - equal:
          path: spec.template.spec.containers[0].env[?(@.name == "automation_gateway_vault_server")].value
          value: "hashivault.example.com"
      - equal:
          path: spec.template.spec.containers[0].env[?(@.name == "automation_gateway_vault_mount_point")].value
          value: "secret"
      - equal:
          path: spec.template.spec.containers[0].env[?(@.name == "automation_gateway_vault_access_token")].value
          value: "/usr/share/automation-gateway/conf/.vault_token_file"
      - equal:
          path: spec.template.spec.containers[0].env[?(@.name == "automation_gateway_vault_cert_verification")].value
          value: "true"
      - equal:
          path: spec.template.spec.containers[0].env[?(@.name == "automation_gateway_vault_ca_file")].value
          value: "/etc/ssl/hv/ca.crt"
      - equal:
          path: spec.template.spec.containers[0].env[?(@.name == "automation_gateway_vault_client_cert_file")].value
          value: "/etc/ssl/hv/tls.crt"
      - equal:
          path: spec.template.spec.containers[0].env[?(@.name == "automation_gateway_vault_client_key_file")].value
          value: "/etc/ssl/hv/tls.key"

  - it: should set the expected environment variables when hashi vault is enabled but hvTLS is not
    set:
      statefulset:
        enabled: true
      applicationSettings:
        hvEnabled: true
        hvSecretName: "hv-secret"
        hvHost: "hashivault.example.com"
        hvTLS: false
        hvCertVerification: false
        hvMountPoint: "secret"
    asserts:
      - equal:
          path: spec.template.spec.containers[0].env[?(@.name == "automation_gateway_vault_enabled")].value
          value: "true"
      - equal:
          path: spec.template.spec.containers[0].env[?(@.name == "automation_gateway_vault_server")].value
          value: "hashivault.example.com"
      - equal:
          path: spec.template.spec.containers[0].env[?(@.name == "automation_gateway_vault_mount_point")].value
          value: "secret"
      - equal:
          path: spec.template.spec.containers[0].env[?(@.name == "automation_gateway_vault_access_token")].value
          value: "/usr/share/automation-gateway/conf/.vault_token_file"
      - equal:
          path: spec.template.spec.containers[0].env[?(@.name == "automation_gateway_vault_cert_verification")].value
          value: "false"
      - notExists:
          path: spec.template.spec.containers[0].env[?(@.name == "automation_gateway_vault_ca_file")].value
      - notExists:
          path: spec.template.spec.containers[0].env[?(@.name == "automation_gateway_vault_client_cert_file")].value
      - notExists:
          path: spec.template.spec.containers[0].env[?(@.name == "automation_gateway_vault_client_key_file")].value

  - it: should set the expected environment variables when hashi vault is disabled
    set:
      statefulset:
        enabled: true
      applicationSettings:
        hvEnabled: false
        hvSecretName: "hv-secret"
        hvHost: "hashivault.example.com"
        hvTLS: true
        hvCertVerification: true
        hvMountPoint: "secret"
    asserts:
      - equal:
          path: spec.template.spec.containers[0].env[?(@.name == "automation_gateway_vault_enabled")].value
          value: "false"
      - notExists:
          path: spec.template.spec.containers[0].env[?(@.name == "automation_gateway_vault_server")].value
